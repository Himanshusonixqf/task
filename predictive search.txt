 <div class="predictive-search">
  <input type="text" id="search-input" placeholder="Search products..." aria-label="Search products">
  <div id="predictive-search-results" class="predictive-search-results"></div>
</div>

<style>
  .predictive-search-results {
    border: 1px solid #ccc;
    background: white;
    position: absolute;
    z-index: 1000;
    /* width: 100%;
    max-height: 200px; */
    overflow-y: auto;
  }

  .predictive-search-results a {
    display: block;
    padding: 10px;
    text-decoration: none;
    color: black;
  }

  .predictive-search-results a:hover {
    background: #f0f0f0;
  }
</style>

<script>
const searchInput = document.getElementById('search-input');
const predictiveSearchResults = document.getElementById('predictive-search-results');

 
let debounceTimeout;
function debounce(func, delay) {
  return function() {
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(func, delay);
  };
}

function fetchSuggestions() {
  const query = searchInput.value.trim();  

 
  if (!query) {
    predictiveSearchResults.innerHTML = '';   
    return;
  }

  fetch(`${window.Shopify.routes.root}search/suggest.json?q=${encodeURIComponent(query)}&resources[type]=product&resources[options][unavailable_products]=hide&resources[options][fields]=product_type`)
    .then(response => response.json())
    .then(suggestions => {
 
      const productSuggestions = suggestions?.resources?.results?.products || [];
      predictiveSearchResults.innerHTML = '';

      if (productSuggestions.length > 0) {
        productSuggestions.forEach(product => {
          const productLink = document.createElement('a');
          productLink.href = product.url;
          productLink.textContent = product.title;
          predictiveSearchResults.appendChild(productLink);
        });
      } else {
        predictiveSearchResults.innerHTML = '<p>No results found</p>';
      }
    })
    .catch(error => {
      console.error('Error fetching search suggestions:', error);
      predictiveSearchResults.innerHTML = '<p>Error fetching search suggestions</p>';
    });
}
 
searchInput.addEventListener('input', debounce(fetchSuggestions, 500));


</script>